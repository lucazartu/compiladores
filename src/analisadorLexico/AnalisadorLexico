package analisadorLexico;

%%

%public
%class AnalisadorLexico
%unicode
%line
%column
%standalone

//Expressoes Regulares

integer = 0|[1-9][0-9]*|"-"[1-9][0-9]*
space = [ \n\r\t\f]
comment = ("//".*)|(\/\*([^\*]|[\r\n]|(\*+([^\*\/]|[\r\n])))*\*+\/)
identifier = ([a-zA-Z]|_)([0-9]|_|[a-zA-Z])*

%%

{integer} {}
{space} {}
{comment} {}
{identifier} {System.out.println(yytext());}

//Keywords

"boolean" {System.out.println(yytext());}
"class" {System.out.println(yytext());}
"public" {System.out.println(yytext());}
"extends" {System.out.println(yytext());}
"static" {System.out.println(yytext());}
"void" {System.out.println(yytext());}
"main" {System.out.println(yytext());}
"String" {System.out.println(yytext());}
"int" {System.out.println(yytext());}
"while" {System.out.println(yytext());}
"if" {System.out.println(yytext());}
"else" {System.out.println(yytext());}
"return" {System.out.println(yytext());}
"length" {System.out.println(yytext());}
"true" {System.out.println(yytext());}
"false" {System.out.println(yytext());}
"this" {System.out.println(yytext());}
"new" {System.out.println(yytext());}
"System.out.println" {System.out.println(yytext());}

//Operators

"&&" {System.out.println(yytext());}
"<" {System.out.println(yytext());}
"==" {System.out.println(yytext());}
"!=" {System.out.println(yytext());}
"+" {System.out.println(yytext());}
"-" {System.out.println(yytext());}
"*" {System.out.println(yytext());}
"!" {System.out.println(yytext());}

//Delimiters

";" {System.out.println(yytext());}
"." {System.out.println(yytext());}
"," {System.out.println(yytext());}
"=" {System.out.println(yytext());}
"(" {System.out.println(yytext());}
")" {System.out.println(yytext());}
"{" {System.out.println(yytext());}
"}" {System.out.println(yytext());}
"[" {System.out.println(yytext());}
"]" {System.out.println(yytext());}
. { throw new RuntimeException("Caractere ilegal! '" + yytext() + "' na linha: " + yyline + ", coluna: " + yycolumn); }